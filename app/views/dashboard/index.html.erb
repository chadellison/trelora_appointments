<div class="nav">
  <ul>
    <li id="add-user"><%= link_to "Add User", "#" if admin? %></li>
    <li id="remove-user"><%= link_to "Remove User", "#" if admin? %></li>
    <li class="field_workers"><%= link_to "All", "#" %></li>
    <li class="field_workers"><%= link_to "Photographer", "#" %></li>
    <li class="field_workers"><%= link_to "Appraiser", "#" %></li>
    <li class="datepicker">Date <input type="text" id="datepicker"></li>
    <li id="demo"></li>
    <li class="leftArrow"><%= link_to "Previous", "#" %></li>
    <li class="rightArrow"><%= link_to "Next", "#" %></li>
  </ul>
</div>
<div id="user-menu" class="hidden" >
  <%= render partial: "dashboard/user_create" %>
</div>
<div id="remove-user-menu" class="hidden" >
  <%= render partial: "dashboard/remove_user" %>
</div>

<div id="map" class="map-width-100"></div>
<div id="addressBar"><input id="pac-input" class="controls" type="text" placeholder="Address"></div>

<script>
  // draw base map
  var selection = 'field_workers';
  var map;
  function drawBaseMap() {

    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);

    // render map
    $('#map').html('');
    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 39.753, lng: -104.9775},
      zoom: 10
    });

    // render search bar
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    return searchBox;
  }
  // get list of field workers
  function getFieldWorkers(date,role) {
    if (typeof role !== "undefined") {
      selection = role
    }

    // get list of field workers and their appointments
    $.ajax({
      type: 'GET',
      data: {day: date},
      url: '/api/v1/' + selection + '.json',
      success: function(data) {
        // add routes to map
        drawBaseMap()
        addRoutes(data);
      },
      error: function(errorBody){
        alert('error');
      }
    });
  }

  function bestAppointmentAddress(location,latLong,date) {
    $.ajax({
      type: 'GET',
      url: "/api/v1/best_appointment.json?markerAddress=" + location + "&date=" + date,
      success: function(data) {
        // display marker where the user input address
        var address = addMarker(latLong);
        attachLocMessage(address,location,latLong)
        if ( data !== null ) {
          // highlight appointment that is closest by drive time to searched address
          var closest_appointment = addMarker({ lat: data.location.latitude, lng: data.location.longitude }, data.field_worker.icon);
          attachLocMessage(closest_appointment,"Closest Spot",data.location)
        }
      },
      error: function(errorBody){
        alert("error")
      }
    })
  }

  function todaysDate(){
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth()+1;
    var yyyy = today.getFullYear();

    if(dd<10) {
        dd='0'+dd
    }

    if(mm<10) {
        mm='0'+mm
    }

    return today = mm+'/'+dd+'/'+yyyy;
  }

  function processDate(time){
    var today = new Date(time);
    var dd = today.getDate();
    var mm = today.getMonth()+1;
    var yyyy = today.getFullYear();

    if(dd<10) {
        dd='0'+dd
    }

    if(mm<10) {
        mm='0'+mm
    }

    return today = mm+'/'+dd+'/'+yyyy;
  }

  function UrlBestDay(location,date) {
    if (getParameterByName('role') === null) {
      var role = "undefined"
    } else {
      var role = getParameterByName('role')
    }
    $.ajax({
      type: 'GET',
      url: "/api/v1/url_best_day.json?markerAddress=" + location + "&date=" + date + "&role=" + role,
      success: function(data) {
          // display marker where the user input address
        var address = addMarker({ lat: data[0].latitude, lng: data[0].longitude });

        attachLocMessage(address,data[0].address,data[0].address)
        if (typeof data[1] !== "undefined") {
          // highlight appointment that is closest by drive time to searched address
          var closest_appointment = addMarker({ lat: data[3].latitude, lng: data[3].longitude }, data[2].icon);
          // addMarker({ lat: data.location.latitude, lng: data.location.longitude }, data.field_worker.icon);
          attachLocMessage(closest_appointment,"Closest Spot",data[3].address)
        }
      },
      error: function(errorBody){
        alert("error")
      }
    })
  }

  // add marker to map
  function addMarker(position,icon) {
    return new google.maps.Marker({
      map: map,
      position: position,
      icon: icon,
    });
  }

  // put routes on map
  function addRoutes(fieldWorkers) {
    var directionsService = new google.maps.DirectionsService;
    var colors = ['#993300', '#0099cc', '#669999', '#cc3300', '#009999', '#cc6699', 'yellow'];
    var trelora = "2401 15th st, Denver CO 80202";
    // iterate through each field workers
    fieldWorkers.forEach(function(fieldWorker, index){
      // instantiate waypoints var
      var waypoints = [];
      // iterate through each appointment
      fieldWorker.appointments.forEach(function(appointment){
        // add their appointment locations to waypoints variable
        waypoints.push({location: appointment.location.address});
        // add marker at location
        var marker = addMarker({ lat: appointment.location.latitude, lng: appointment.location.longitude }, fieldWorker.icon);
        var message = appointment.info.start_time + "<br />" + appointment.info.end_time
        attachMessage(marker,message,appointment.location.address)
      });
      // pass through waypoints to display directions function
      var directionsDisplay = new google.maps.DirectionsRenderer({
        map: map,
        suppressMarkers: true,
        polylineOptions: {
          strokeColor: colors[index]
        }
      });

      directionsService.route({
        origin: trelora,
        destination: trelora,
        waypoints: waypoints,
        travelMode: google.maps.TravelMode.DRIVING,
        avoidTolls: true
      }, function(response, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          directionsDisplay.setOptions({ preserveViewport: true });
          directionsDisplay.setDirections(response);
        } else {
          alert('Could not display directions due to: ' + status);
        }
      });

    });
  }


  // add event listeners
  function addListeners(searchBar, date) {
    $('#datepicker').datepicker({
      onSelect: function(dateText, inst) {
        //Update the url & Update the browser history
        drawBaseMap()
        window.history.pushState("object or string", "Title", "?date=" + dateText);
        getFieldWorkers(dateText)
        date = dateText
      }
    });

    $(".field_workers").on("click", function(){
      var buttonText = $(this).find("a").text()
      if (buttonText === "Photographer") {
        var role = "photographers"
      } else if (buttonText === "Appraiser") {
        var role = "appraisers"
      } else if (buttonText === "All") {
        var role = "field_workers"
      }

      getFieldWorkers(date, role)
    });

    $(".leftArrow").on("click", function(){
      var buttonText = $(this).find("a").text()
      if (buttonText === "Previous") {
        var currentDate = new Date(date).getTime() - 86400000;
        var previousDate = new Date(currentDate);
        date = processDate(previousDate)
        window.history.pushState("object or string", "Title", "?date=" + date);
      }
      getFieldWorkers(date)
    });

    $(".rightArrow").on("click", function(){
      var buttonText = $(this).find("a").text()
      if (buttonText === "Next") {
        var currentDate = new Date(date).getTime() + 86400000;
        var nextDate = new Date(currentDate);
        date = processDate(nextDate)
        window.history.pushState("object or string", "Title", "?date=" + date);
      }
      getFieldWorkers(date)
    });

    //Search box listener
    searchBar.addListener('places_changed', function() {
      var places = searchBar.getPlaces();
      //Add marker...
      if (places.length === 1) {
        bestAppointmentAddress(places[0].name,places[0].geometry.location,date)
        //Update the url
        //Update the browser history

      } else {
        alert("be more specific");
      }
    })
  }


  // add searched address marker to map
  function getParameterByName(name) {
    var url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
  }


  function initMap() {
    // render base map
    searchBar = drawBaseMap();

    // Set default date
    var date = todaysDate()
    // if url contains date
    if (getParameterByName('date') !== null ) {
      // override the date
      date = getParameterByName('date');
    }

    // if url contains selection
    if (getParameterByName('role') !== null ) {
      // override the selection
      selection = getParameterByName('role');
    }

    // get list of field workers
    getFieldWorkers(date);

    if (getParameterByName('address') !== null ) {
      // find the best worker
      UrlBestDay(getParameterByName('address'),date)
    }

    //If the url has an address
      //Add the marker...
    addListeners(searchBar,date);

  }

  function attachMessage(marker, secretMessage, address) {

    var infowindow = new google.maps.InfoWindow({
      content: secretMessage
    });

    marker.addListener('mouseover', function() {
      infowindow.open(marker.get('map'), marker);
    })

    marker.addListener('mouseout', function() {
      infowindow.close(marker.get('map'), marker);
    })

  }

  function attachLocMessage(marker, secretMessage, address) {

    var infowindow = new google.maps.InfoWindow({
      content: secretMessage
    });

    // marker.addListener('mouseover', function() {
      infowindow.open(marker.get('map'), marker);
    // })

    marker.addListener('clickOn', function() {
      infowindow.close(marker.get('map'), marker);
    })

  }

</script>
<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_API_KEY"] %>&libraries=places&callback=initAutocomplete&callback=initMap">
</script>
</div>
