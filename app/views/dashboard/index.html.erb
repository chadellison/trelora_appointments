<div class="nav">
  <ul>
    <li class="active login"><%= link_to "Sign in with Google", google_login_path if !current_user %></li>
    <li class="active login"><%= link_to "Logout", session_path, method: :delete if current_user %></li>
    <li class="photographer"><%= link_to "Photographer", "#" %></li>
    <li class="appraiser"><%= link_to "Appraiser", "#" %></li>
  </ul>
</div>

<input id="pac-input" class="controls" type="text" placeholder="Search Box">

<div id="map"></div>

<script>
  function initMap() {
      var appointmentData = ''
      $.ajax({
        type: 'GET',
        url: "http://localhost:3000/api/v1/field_workers.json",
        success: function(data) {
          returnData(data)
        }
      })
      function returnData(data){
        fieldWorkerData = data


    var map = new google.maps.Map(document.getElementById('map'), {
    });





    var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
        });

    var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
      searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
          return;
        }

        // Clear out the old markers.
        markers.forEach(function(marker) {
          marker.setMap(null);
        });
        markers = [];

        var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          // map.fitBounds(bounds);
      });






    var directionsService = new google.maps.DirectionsService;
    var trelora = "2401 15th st, Denver CO 80202"
    var colors = ["red", "green", "purple", "blue"]
    $.each(fieldWorkerData, function(i, fieldWorker){
      var name = fieldWorker.username
      var icon = fieldWorker.icon
      var appointments = fieldWorker.appointments
      var waypoints = []

      $.each(appointments, function(index, appointment){
        waypoints.push({location: appointment.location.address})

        var marker = new google.maps.Marker({
          position: {lat: appointment.location.latitude, lng: appointment.location.longitude},
          icon: icon,
          map: map
        });
      })

      length = appointments.length
      var directionsDisplay = new google.maps.DirectionsRenderer({
        map: map,
        suppressMarkers : true,
        polylineOptions: {
          strokeColor: colors[i - 1]
        }
      });

      displayRoute(trelora, waypoints, directionsService,
          directionsDisplay);
    })
  }

  function displayRoute(trelora, waypoints, service, display) {
    service.route({
      origin: trelora,
      destination: trelora,
      waypoints: waypoints,
      travelMode: google.maps.TravelMode.DRIVING,
      avoidTolls: true
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        display.setDirections(response);
      } else {
        alert('Could not display directions due to: ' + status);
      }
    });
  }
  }

</script>
<script async defer
src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_API_KEY"] %>&libraries=places&callback=initAutocomplete&callback=initMap">
</script>
